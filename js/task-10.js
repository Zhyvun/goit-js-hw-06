/*
–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ input —ñ –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –°—Ç–≤–æ—Ä–∏—Ç–∏, 
–ø—ñ—Å–ª—è —á–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è. –ù–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è–º –Ω–∞ –∫–Ω–æ–ø–∫—É –û—á–∏—Å—Ç–∏—Ç–∏, –∫–æ–ª–µ–∫—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –æ—á–∏—â–∞—î—Ç—å—Å—è.

–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é createBoxes(amount), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - —á–∏—Å–ª–æ. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î —Å—Ç—ñ–ª—å–∫–∏ <div>, 
—Å–∫—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–æ –≤ amount —ñ –¥–æ–¥–∞—î —ó—Ö —É div#boxes.

    –†–æ–∑–º—ñ—Ä–∏ –Ω–∞–π–ø–µ—Ä—à–æ–≥–æ <div> - 30px –Ω–∞ 30px.
    –ö–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —à–∏—Ä—à–∏–º —ñ –≤–∏—â–∏–º –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞ 10px.
    –í—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ HEX. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≥–æ—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é 
    getRandomHexColor –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É.

–°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é destroyBoxes(), —è–∫–∞ –æ—á–∏—â–∞—î –≤–º—ñ—Å—Ç div#boxes, —É —Ç–∞–∫–∏–π —Å–ø–æ—Å—ñ–± –≤–∏–¥–∞–ª—è—é—á–∏ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏.    
*/

//! –ü–æ–∫–∏ —Å–∫–ª–∞–¥–Ω–æ

//TODO:
/*
1. –í–∏–≤–æ–¥–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –æ–±'—î–∫—Ç–∏ (<div>).
2. –ü—Ä–æ–ø–∏—Å–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ <div>
3. –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é createBoxes(amount)
4. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –æ—á–∏—Å—Ç–∫–∏ destroyBoxes()

*/

function getRandomHexColor() {
  return `#${Math.floor(Math.random() * 16777215)
    .toString(16)
    .padStart(6, 0)}`;
}

//1.
const controls = document.getElementById("controls");
const insNumEl = document.querySelector('[type="number"]');
const createBtnEl = document.querySelector("button[data-create]");
const destroyBtnEl = document.querySelector("button[data-destroy]");
const divEl = document.getElementById("boxes");

// console.log(controls);

//2.
divEl.style.display = "flex";
divEl.style.flexWrap = "wrap";
divEl.style.alignItems = "center";
divEl.style.marginTop = "30px";

// –í—ñ—à–∞—î–º —Å–ª—É—Ö–∞—á–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É createBtnEl
createBtnEl.addEventListener("click", () => {
  // console.log(insNumEl.value);

  // –ü—Ä–æ–ø–∏—Å—É—î–º–æ —É–º–æ–≤—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö —á–∏—Å–µ–ª (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ min="1" max="100" )
  const insert = insNumEl.value.trim();
  if (
    Number(insert) > Number(insNumEl.max) ||
    Number(insert) < Number(insNumEl.min)
  ) {
    alert(
      "–õ—é–¥–∏–Ω–æ –î–æ–±—Ä–∞!üôè –ù–µ –±–∞–ª—É–π—Å—è, –≤–≤–µ–¥–∏ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 100 ... –±–æ –Ω–µ –ª—ñ–∑–µ üëÄ"
    );
  } else {
    createBoxes(insert);
  }
  insNumEl.value = "";
});

//3.
function createBoxes(quantity) {
  let size = 30;
  const boxesArr = [];
  for (let i = 0; i < quantity; i += 1) {
    size += 10 * i;
    const div = `<div 
    class="item" style="display: block; 
    margin-right: 10px;
    margin-bottom: 30px;
    background-color: ${getRandomHexColor()}; 
    width: ${size}px; height: ${size}px;">
    </div>`;
    boxesArr.push(div);
  }
  divEl.insertAdjacentHTML("beforeend", boxesArr.join(""));
  // console.log("arr length", boxesArr.length);
}

// –í—ñ—à–∞—î–º —Å–ª—É—Ö–∞—á–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É destroyBtnEl
destroyBtnEl.addEventListener("click", destroyBoxes);

//4.
function destroyBoxes() {
  insNumEl.value = "";
  divEl.innerHTML = "";
}
